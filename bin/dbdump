#! /usr/bin/env python3
# -*- coding: UTF-8 -*-
import os,sys
import logging, logging.handlers
from configparser import ConfigParser,NoSectionError
from optparse import OptionParser, OptionGroup
module = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0,module)
from netkiller.mysql import *

class Dump(MySQLDump):

	def __init__(self): 
		usage = "usage: %prog [options] <item item1 item2 ... item(n)>"
		self.parser = OptionParser(usage)
		self.parser.add_option('-c', '--config', dest='config', help='config file', default='/usr/local/etc/dump.ini', metavar='/usr/local/etc/dump.ini')
		self.parser.add_option('','--logfile', dest='logfile', help='logs file.', default='/dev/null', metavar='/var/log/dump.log')
		self.parser.add_option('-d','--directory', dest='directory', help='working directory', default='/tmp/backup', metavar='/tmp/backup')
		self.parser.add_option('-l', '--list', dest='list', action='store_true', help="dump items")
		self.parser.add_option('-z', '--gzip', dest='gzip', action='store_true', help="Gzip")
		self.parser.add_option('-g', '--gpg', dest='gpg', action='store_true', help="OpenGPG")
		self.parser.add_option('', '--debug', action='store_true', dest="debug", help="debug mode")

		(self.options, self.args) = self.parser.parse_args()
		print(self.options, self.args)

		try:
			logging.basicConfig(level=logging.NOTSET, format='%(asctime)s %(levelname)-8s %(message)s',	datefmt='%Y-%m-%d %H:%M:%S', filename=self.options.logfile, filemode='a')
		except Exception as err:
			print("Error: %s" %(err))
			sys.exit(2)
		pass

		super().__init__(self.options.directory)

		self.config = ConfigParser()
		self.config.read(self.options.config)

		if self.options.list :
			self.list()

		if self.args :
			self.logging.info("==================== Backup starting ====================")
			for item in self.args :
				self.dump(item)
			self.copies(10).delete()
			# self.logging.info("==================== Backup end ====================")
		else:
			self.usage()

	def usage(self):
		print("Database backup")
		self.parser.print_help()
		print("\nHomepage: http://www.netkiller.cn\tAuthor: Neo <netkiller@msn.com>")
		exit()

	def list(self):
		self.logging.info(self.config.sections())
		for item in self.config.sections() :
			print(item)
		exit()
	def conf(self, item):
		try:
			# print(self.config[item])
			conf = dict(self.config.items(item))
		except NoSectionError as error :
			print(error)
			exit()
		return 
	def dump(self, item):
		# conf = self.conf(item)
		conf = dict(self.config.items(item))
		self.logging.info(conf)

		try:
			dump = MySQLDump(self.options.directory)
			dump.username(conf['user'])
			dump.password(conf['pass'])
			dump.cnf()
			dump.compress().events().triggers().routines()
			# dump.all_databases()
			dump.single_transaction()
			# dump.skip_lock_tables()
			dump.column_statistics()
			dump.set_gtid_purged()
			# dump.log_error('/tmp/test.log')
			if self.options.gzip :
				self.Gzip()
			if self.options.gpg :
				dump.OpenGPG()
			dump.database(conf['dbname'])
			dump.execute()
		except KeyError as error:
			print('The configuration item was not found: [%s] %s.' % (item, error))
		# exit()
if __name__ == '__main__':
	try:
		dump = Dump()
	except KeyboardInterrupt:
		print ("Crtl+C Pressed. Shutting down.")