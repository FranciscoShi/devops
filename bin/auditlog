#!/usr/bin/env python3
#-*- coding: utf-8 -*-
##############################################
# Home	: http://netkiller.github.io
# Author: Neo <netkiller@msn.com>
##############################################
import os,io,sys
import logging, configparser
import threading
from optparse import OptionParser, OptionGroup
import time
from datetime import datetime	
import re

class Auditlog():
	def __init__(self, workspace = None, logging = None):
		#usage = "usage: %prog [options] {branch|stage} project"
		usage = "\n  Homepage: http://netkiller.github.com\n  Author: Neo <netkiller@msn.com>"
		self.parser = OptionParser(usage)

		self.parser.add_option('-d','--daemon', dest='daemon', action='store_true', default=False, help='run as daemon')
		self.parser.add_option("-l", "--logfile", dest="logfile", default=None,help="log file example: /var/log/message")
		self.parser.add_option('-r','--regex', type="string", dest="regex", default=None, help='regex/regexp example: ^Feb')
		self.parser.add_option('','--regular', dest="regular", default=None, help='regular file')
		self.parser.add_option('', "--debug", action="store_true", help="Print debug information")

		(self.options, self.args) = self.parser.parse_args()
		
		basedir=os.path.dirname(os.path.dirname(os.path.abspath(__file__)))	
		#conf = basedir+'/etc/'+'auditlog.ini'
		#print(conf)
		self.configure(basedir+'/etc/'+'auditlog.ini')

	def usage(self):
		self.parser.print_help()

	def configure(self,inifile, section = None):
		conf = {}
		try:
			if not os.path.exists(inifile):
				raise Exception('Cannot open file', inifile)
			config = configparser.SafeConfigParser()
			config.read(inifile)

			if section :
				conf = dict(config.items(section))
			else:
				for sect in config.sections():
					conf[sect] = dict(config.items(sect))

		except configparser.NoSectionError as err:
			print("Error: %s %s" %(err, inifile))
			sys.exit(1)
		except Exception as err:
			print("Error: %s %s" %(err, inifile))
			sys.exit(1)
		
		self.config = conf

	def filter(self, logfile, regex):
		with open(logfile) as files:
			for line in files:
				if re.search(regex, line):
					print(line.strip())

	def daemon(self):
		try:
			#print(self.config)
			for section in self.config:
				item = self.config[section]
				#print(item)
				logfile = item['logfile']
				regular = item['regular']

				if not os.path.exists(logfile):
					raise Exception('Cannot open file', logfile)

				if not os.path.exists(regular):
					raise Exception('Cannot open file', regular)

				regexs = []
				with open(regular,'r') as regulardata:
					for line in regulardata:
						regexs.append(line.strip())
				#print(regexs)
				
				with open(logfile,'r') as logdata:
					#print(regulardata.readlines())
					for line in logdata:
						#print(line)
						for regex in regexs:
							#print(regex.strip(), line.strip())
							if re.search(regex.strip(), line.strip()):
								print(line.strip())
							#else:
							#	print(line)
		except Exception as err:
			print("Error: %s %s" %(err, 'daemon'))
			sys.exit(1)
			
	def main(self):

		if self.options.daemon:
			pid = os.fork()
			if pid > 0:
				#self.logging.info('daemon is ok')
				sys.exit(0)
	
		if self.options.logfile :
			if self.options.regex:
				self.filter(self.options.logfile, self.options.regex)
			if self.options.regular:
				regular = self.options.regular

				if not os.path.exists(regular):
					raise Exception('Cannot open file', regular)

				with open(regular,'r') as regexs:
					for regex in regexs:
						print(regex)
						#regexs.append(line.strip())
						self.filter(self.options.logfile, regex.strip())

		else:
			self.daemon()
	
		if self.options.debug:
			print("===================================")
			print(self.options, self.args)
			print("===================================")

if __name__ == '__main__':
	try:
		auditlog = Auditlog()
		#deployment.debug = True
		#auditlog.usage()
		auditlog.main()
	except KeyboardInterrupt:
		print ("Crtl+C Pressed. Shutting down.")