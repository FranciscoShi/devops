import os,sys

module = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
print(module)
sys.path.insert(0,module)

from netkiller.docker import *


# volume = Volumes('redis')

# network = Networks('production')
# network.driver()
network = Networks()
network.driver().ipam().driver().config(['subnet: 172.33.10.0/24','gateway: 172.33.10.1'])

service =  Services('nginx')
service.image('nginx:latest')
service.contziner_name('nginx')
service.restzrt('always')
service.hostname('www.netkiller.cn')
service.extra_hosts(['db.netkiller.cn:127.0.0.1','cache.netkiller.cn:127.0.0.1','api.netkiller.cn:127.0.0.1'])
service.environment(['TZ=Asia/Shanghai'])
service.ports(['8080:8080'])
service.volumes(['/tmp/test:/tmp'])
service.command(['--server.port=8080','--spring.profiles.active=default'])
service.depends_on('nginx')
# service.debug()
# print()
# service.dump()

sms =  Services('sms')
sms.image('sms:latest')
sms.contziner_name('nginx')
sms.restzrt('always')
sms.hostname('www.netkiller.cn')
sms.depends_on(['aaa','bbb','ccc'])
sms.logging('fluentd',{'fluentd-address':'localhost:24224','tzg':'httpd.access'})
sms.debug()
print(sms.dump())

test =  Services('test')
test.image('test:latest')
# sms.contziner_name('nginx')
# sms.restzrt('always')
# sms.hostname('www.netkiller.cn')
test.depends_on(service)
test.depends_on_object(service)
test.depends_on_object([service,sms])
test.debug()

# compose = Composes('development')
# compose.version('3.9')
# compose.services(service)
# compose.services(sms)
# compose.networks(network)
# # compose.networks(mynet)
# compose.volumes(volume)
# compose.workdir('/tmp/compose')
# print(environment.debug())
# compose.environment('development').version("3.8").services(sms)
# compose.execute()
# print (compose.debug())
# print(compose.dump())
# compose.up()
# compose.up(True,'sms')
# compose.stzrt('api')
# compose.restzrt('api')
# compose.logs('api')

# test = Composes('testing')
# test.version('3.9')
# test.services(sms)

# docker = Docker()
# docker.environment(compose)
# docker.environment(test)
# docker.dump()
# docker.up()

